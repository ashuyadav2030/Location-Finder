<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Location Selector</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
        }

        .container {
            max-width: 800px;
            margin: 20px auto;
            padding: 20px;
            background-color: #ffffff;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }

        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 20px;
        }

        .dropdown-container {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        select {
            padding: 10px;
            font-size: 1rem;
            border: 1px solid #ccc;
            border-radius: 5px;
            background-color: #fafafa;
            outline: none;
        }

        #map {
            height: 400px;
            margin-top: 20px;
            border-radius: 8px;
        }

        .error-message {
            text-align: center;
            color: red;
            margin-top: 10px;
            font-weight: bold;
        }
    </style>
</head>

<body>
    <div class="container">
        <h1>Select Location</h1>
        <div class="dropdown-container">
            <select id="stateDropdown" onchange="updateDistricts()">
                <option value="">Select State</option>
            </select>
            <select id="districtDropdown" onchange="updateSubDistricts()">
                <option value="">Select District</option>
            </select>
            <select id="subDistrictDropdown" onchange="updateVillages()">
                <option value="">Select Town</option>
            </select>
            <select id="villageDropdown" onchange="showOnMap()">
                <option value="">Select Village</option>
            </select>
        </div>
        <div id="errorMessage" class="error-message"></div>
        <div id="map"></div>
    </div>

    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script>
        let locationData = {}

        const stateDropdown = document.getElementById('stateDropdown')
        const districtDropdown = document.getElementById('districtDropdown')
        const subDistrictDropdown = document.getElementById('subDistrictDropdown')
        const villageDropdown = document.getElementById('villageDropdown')
        const errorMessage = document.getElementById('errorMessage')
        const map = L.map('map').setView([20.5937, 78.9629], 5)

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: 'Â© OpenStreetMap contributors'
        }).addTo(map);

        let currentMarker = null;

        fetch('http://localhost:3000/locationdata')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to fetch location data.')
                }
                return response.json();
            })
            .then(data => {
                locationData = data;
                const states = data.map(state => state.state).sort()
                populateDropdown(stateDropdown, states, 'Select State')
            })
            .catch(error => {
                console.error('Error fetching location data:', error)
                showError('Unable to load location data. Please try again later.')
            });

        function populateDropdown(dropdown, items, defaultText) {
            dropdown.innerHTML = `<option value="">${defaultText}</option>`;
            items.forEach(item => {
                const option = document.createElement('option')
                option.value = item;
                option.textContent = item;
                dropdown.appendChild(option)
            });
        }

        function updateDistricts() {
            const state = stateDropdown.value;
            if (!state) {
                populateDropdown(districtDropdown, [], 'Select District')
                populateDropdown(subDistrictDropdown, [], 'Select Sub-District') 
                populateDropdown(villageDropdown, [], 'Select Village')
                return;
            }
            const stateData = locationData.find(s => s.state === state);
            if (stateData && stateData.districts) {
                const districts = stateData.districts.map(d => d.district).sort();
                populateDropdown(districtDropdown, districts, 'Select District')
                clearError();
            } else {
                populateDropdown(districtDropdown, [], 'Select District')
                showError('No districts found for the selected state.')
            }
        }

        function updateSubDistricts() {
            const state = stateDropdown.value;
            const district = districtDropdown.value;
            if (!state || !district) {
                populateDropdown(subDistrictDropdown, [], 'Select Town')
                populateDropdown(villageDropdown, [], 'Select Village')
                return;
            }
            const stateData = locationData.find(s => s.state === state);
            const districtData = stateData.districts.find(d => d.district === district)
            if (districtData && districtData.subDistricts) {
                const subDistricts = districtData.subDistricts.map(sd => sd.subDistrict).sort();
                populateDropdown(subDistrictDropdown, subDistricts, 'Select Town')
                clearError();
            } else {
                populateDropdown(subDistrictDropdown, [], 'Select Town')
                showError('No sub-districts found for the selected district.')
            }
        }

        function updateVillages() {
            const state = stateDropdown.value;
            const district = districtDropdown.value;
            const subDistrict = subDistrictDropdown.value;
            if (!state || !district || !subDistrict) {
                populateDropdown(villageDropdown, [], 'Select Village')
                return;
            }
            const stateData = locationData.find(s => s.state === state);
            const districtData = stateData.districts.find(d => d.district === district);
            const subDistrictData = districtData.subDistricts.find(sd => sd.subDistrict === subDistrict);
            if (subDistrictData && subDistrictData.villages) {
                const villages = subDistrictData.villages.map(v => v).sort();
                populateDropdown(villageDropdown, villages, 'Select Village')
                clearError();
            } else {
                populateDropdown(villageDropdown, [], 'Select Village')
                alert('No villages found for the selected sub-district.')
            }
        }

        function showOnMap() {
            const state = stateDropdown.value;
            const village = villageDropdown.value;

            if (state && village) {
                const query = `${village}, ${state}, India`;

                const requestData = {
                    state: state,
                    village: village
                };

                showError('Loading coordinates...', 'info')

                fetch('/getcoordinates', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestData),
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.error) {
                            throw new Error(data.error)
                        }

                        const { lat, lon, display_name } = data;
                        const coordinates = [lat, lon];

                        map.setView(coordinates, 14)

                        if (currentMarker) {
                            map.removeLayer(currentMarker)
                        }

                        currentMarker = L.marker(coordinates).addTo(map)
                            .bindPopup(`<strong>${village}</strong><br>${display_name}`)
                            .openPopup();

                        clearError();
                    })
                    .catch(error => {
                        console.error('Error fetching coordinates:', error)
                        showError(error.message)
                    });
            } else {
                showError('Please select all location fields.')
            }
        }

        function showError(message, type = 'error') {
            if (type === 'error') {
                errorMessage.style.color = 'red';
            } else if (type === 'info') {
                errorMessage.style.color = '#666';
            }
            errorMessage.textContent = message;
        }

        function clearError() {
            errorMessage.textContent = '';
        }

        stateDropdown.addEventListener('change', updateDistricts)
        districtDropdown.addEventListener('change', updateSubDistricts)
        subDistrictDropdown.addEventListener('change', updateVillages)
    </script>

</body>

</html>