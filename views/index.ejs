<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Location Selector</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
        }

        .container {
            max-width: 800px;
            margin: 20px auto;
            padding: 20px;
            background-color: #ffffff;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }

        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 20px;
        }

        .dropdown-container {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        select {
            padding: 10px;
            font-size: 1rem;
            border: 1px solid #ccc;
            border-radius: 5px;
            background-color: #fafafa;
            outline: none;
        }

        #map {
            height: 400px;
            margin-top: 20px;
            border-radius: 8px;
        }

        .error-message {
            text-align: center;
            color: red;
            margin-top: 10px;
            font-weight: bold;
        }
    </style>

    <!-- Google Maps API -->
    <script
        src="https://maps.googleapis.com/maps/api/js?key="Google_API_Key"&libraries=places"></script>
</head>

<body>
    <div class="container">
        <h1>Select Location</h1>
        <div class="dropdown-container">
            <select id="stateDropdown" onchange="updateDistricts()">
                <option value="">Select State</option>
            </select>
            <select id="districtDropdown" onchange="updateSubDistricts()">
                <option value="">Select District</option>
            </select>
            <select id="subDistrictDropdown" onchange="updateVillages()">
                <option value="">Select Town</option>
            </select>
            <select id="villageDropdown" onchange="showOnMap()">
                <option value="">Select Village</option>
            </select>
        </div>
        <div id="errorMessage" class="error-message"></div>
        <div id="map"></div>
    </div>

    <script>
        const stateDropdown = document.getElementById('stateDropdown');
        const districtDropdown = document.getElementById('districtDropdown');
        const subDistrictDropdown = document.getElementById('subDistrictDropdown');
        const villageDropdown = document.getElementById('villageDropdown');
        const errorMessage = document.getElementById('errorMessage');

        let map;
        let currentMarker = null;

        function initMap() {
            map = new google.maps.Map(document.getElementById("map"), {
                center: { lat: 20.5937, lng: 78.9629 },
                zoom: 4.4,
            });
        }

        window.onload = initMap;

        fetch('/locationdata')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to fetch location data.')
                }
                return response.json()
            })
            .then(data => {
                const states = data.state.sort();
                populateDropdown(stateDropdown, states, 'Select State')
            })
            .catch(error => {
                console.error('Error fetching location data:', error);
                showError('Unable to load location data. Please try again later.')
            })

        function populateDropdown(dropdown, items, defaultText) {
            items.sort((a, b) => a.localeCompare(b))

            dropdown.innerHTML = `<option value="">${defaultText}</option>`;
            items.forEach(item => {
                const option = document.createElement('option')
                option.value = item;
                option.textContent = item;
                dropdown.appendChild(option)
            });
        }


        function updateDistricts() {
            const state = stateDropdown.value;
            populateDropdown(districtDropdown, [], 'Select District')
            populateDropdown(subDistrictDropdown, [], 'Select Town')
            populateDropdown(villageDropdown, [], 'Select Village')

            if (!state) return;

            errorMessage.textContent = 'Loading districts...';
            fetch(`/districts?state=${state}`, {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' },
            })

                .then(response => {
                    if (!response.ok) throw new Error('Failed to fetch districts.');
                    return response.json();
                })
                .then(districts => {
                    populateDropdown(districtDropdown, districts, 'Select District');
                    errorMessage.textContent = '';
                })
                .catch(error => {
                    console.error('Error fetching districts:', error);
                    showError('Unable to load districts.');
                });
        }

        function updateSubDistricts() {
            const district = districtDropdown.value;
            const state = stateDropdown.value;
            populateDropdown(subDistrictDropdown, [], 'Select Town')
            populateDropdown(villageDropdown, [], 'Select Village')

            if (!district || !state) return;

            fetch(`/subdistricts?state=${encodeURIComponent(state)}&district=${encodeURIComponent(district)}`)
                .then(response => response.json())
                .then(subDistricts => populateDropdown(subDistrictDropdown, subDistricts, 'Select Town'))
                .catch(() => showError('Unable to load Town.'));
        }

        function updateVillages() {
    const state = stateDropdown.value;
    const subdistrict = subDistrictDropdown.value;
    const district = districtDropdown.value;

    populateDropdown(villageDropdown, [], 'Select Village')

    if (!district || !subdistrict || !state) return;

    fetch(`/villages?subdistrict=${encodeURIComponent(subdistrict)}&state=${encodeURIComponent(state)}&district=${encodeURIComponent(district)}`)
        .then(response => {
            if (!response.ok) throw new Error('Failed to fetch villages.')
            return response.json()
        })
        .then(villages => populateDropdown(villageDropdown, villages, 'Select Village'))
        .catch(err => {
            console.error(err)
            showError('Unable to load villages.')
        });
}


        function showOnMap() {
            const state = stateDropdown.value;
            const village = villageDropdown.value;
            if (!state || !village) return showError('Please select all fields.');

            fetch('/getcoordinates', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ state, village }),
            })
                .then(response => response.json())
                .then(data => {
                    if (data.error) throw new Error(data.error)
                    const { lat, lon, display_name } = data;
                    const coordinates = { lat, lng: lon }
                    map.setCenter(coordinates)
                    map.setZoom(14);
                    if (currentMarker) currentMarker.setMap(null)
                    currentMarker = new google.maps.Marker({
                        position: coordinates,
                        map: map,
                        title: `${village} - ${display_name}`,
                    });
                    const infoWindow = new google.maps.InfoWindow({
                        content: `<strong>${village}</strong><br>${display_name}`,
                    });
                    infoWindow.open(map, currentMarker)
                })
                .catch(error => showError(error.message))
        }

        function showError(message) {
            errorMessage.textContent = message;
        }

        stateDropdown.addEventListener('change', updateDistricts)
        districtDropdown.addEventListener('change', updateSubDistricts)
        subDistrictDropdown.addEventListener('change', updateVillages)
    </script>

</body>

</html>
